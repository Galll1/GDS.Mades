//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GDS.Mades.DataService.Client.MadesDataService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MadesDataService.IMadesDataService")]
    public interface IMadesDataService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMadesDataService/CreateStore", ReplyAction="http://tempuri.org/IMadesDataService/CreateStoreResponse")]
        void CreateStore(string indexType, System.Guid storeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMadesDataService/CreateStore", ReplyAction="http://tempuri.org/IMadesDataService/CreateStoreResponse")]
        System.Threading.Tasks.Task CreateStoreAsync(string indexType, System.Guid storeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMadesDataService/GetData", ReplyAction="http://tempuri.org/IMadesDataService/GetDataResponse")]
        GDS.Mades.Data.Core.Storeable.JsonStoreable[] GetData(System.Guid storeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMadesDataService/GetData", ReplyAction="http://tempuri.org/IMadesDataService/GetDataResponse")]
        System.Threading.Tasks.Task<GDS.Mades.Data.Core.Storeable.JsonStoreable[]> GetDataAsync(System.Guid storeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMadesDataService/StoreData", ReplyAction="http://tempuri.org/IMadesDataService/StoreDataResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(GDS.Mades.Data.Core.Storeable.JsonStoreable))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(GDS.Mades.Data.Core.Storeable.JsonStoreable[]))]
        void StoreData(System.Guid storeId, object dataToStore);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMadesDataService/StoreData", ReplyAction="http://tempuri.org/IMadesDataService/StoreDataResponse")]
        System.Threading.Tasks.Task StoreDataAsync(System.Guid storeId, object dataToStore);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMadesDataService/StoreMultipleData", ReplyAction="http://tempuri.org/IMadesDataService/StoreMultipleDataResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(GDS.Mades.Data.Core.Storeable.JsonStoreable))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(GDS.Mades.Data.Core.Storeable.JsonStoreable[]))]
        void StoreMultipleData(System.Guid storeId, object[] dataToStore);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMadesDataService/StoreMultipleData", ReplyAction="http://tempuri.org/IMadesDataService/StoreMultipleDataResponse")]
        System.Threading.Tasks.Task StoreMultipleDataAsync(System.Guid storeId, object[] dataToStore);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMadesDataServiceChannel : GDS.Mades.DataService.Client.MadesDataService.IMadesDataService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MadesDataServiceClient : System.ServiceModel.ClientBase<GDS.Mades.DataService.Client.MadesDataService.IMadesDataService>, GDS.Mades.DataService.Client.MadesDataService.IMadesDataService {
        
        public MadesDataServiceClient() {
        }
        
        public MadesDataServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MadesDataServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MadesDataServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MadesDataServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void CreateStore(string indexType, System.Guid storeId) {
            base.Channel.CreateStore(indexType, storeId);
        }
        
        public System.Threading.Tasks.Task CreateStoreAsync(string indexType, System.Guid storeId) {
            return base.Channel.CreateStoreAsync(indexType, storeId);
        }
        
        public GDS.Mades.Data.Core.Storeable.JsonStoreable[] GetData(System.Guid storeId) {
            return base.Channel.GetData(storeId);
        }
        
        public System.Threading.Tasks.Task<GDS.Mades.Data.Core.Storeable.JsonStoreable[]> GetDataAsync(System.Guid storeId) {
            return base.Channel.GetDataAsync(storeId);
        }
        
        public void StoreData(System.Guid storeId, object dataToStore) {
            base.Channel.StoreData(storeId, dataToStore);
        }
        
        public System.Threading.Tasks.Task StoreDataAsync(System.Guid storeId, object dataToStore) {
            return base.Channel.StoreDataAsync(storeId, dataToStore);
        }
        
        public void StoreMultipleData(System.Guid storeId, object[] dataToStore) {
            base.Channel.StoreMultipleData(storeId, dataToStore);
        }
        
        public System.Threading.Tasks.Task StoreMultipleDataAsync(System.Guid storeId, object[] dataToStore) {
            return base.Channel.StoreMultipleDataAsync(storeId, dataToStore);
        }
    }
}
